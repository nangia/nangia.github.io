<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ruminations</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/tech.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2013-09-15T00:05:00+05:30</updated><entry><title>First Fibonacci Number with not Less than 1000 Digits</title><link href="http://localhost:8000/fibonacci-num-with-not-less-than-1000digits.html" rel="alternate"></link><updated>2013-09-15T00:05:00+05:30</updated><author><name>Sandeep Nangia</name></author><id>tag:localhost:8000,2013-09-15:fibonacci-num-with-not-less-than-1000digits.html</id><summary type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;The Fibonacci sequence is defined as follows:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first Fibonacci number is 1.&lt;/li&gt;
&lt;li&gt;The second Fibonacci number is 1.&lt;/li&gt;
&lt;li&gt;After this any Fibonacci number is the sum of the preceding two Fibonacci numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, the first 10 numbers of the Fibonacci sequence are 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. &lt;/p&gt;
&lt;p&gt;Find the first Fibonacci sequence with not less than 1000 digits.&lt;/p&gt;
&lt;p&gt;This problem is slightly altered version of &lt;a href="http://projecteuler.net/problem=25"&gt;Project Euler Problem 25&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Solution in Clojure&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;fib-next&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;fib1&lt;/span&gt; &lt;span class="nv"&gt;fib2&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;fib2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;fib1&lt;/span&gt; &lt;span class="nv"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc &lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;fib-seq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iterate &lt;/span&gt;&lt;span class="nv"&gt;fib-next&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;lengthlessthan?&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;fib1&lt;/span&gt; &lt;span class="nv"&gt;fib2&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str &lt;/span&gt;&lt;span class="nv"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;fib-seq&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;drop-while &lt;/span&gt;&lt;span class="nv"&gt;lengthlessthan?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;take &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;To solve this, first we define a function &lt;em&gt;fib-next&lt;/em&gt; which takes in a vector with three numbers: nth Fibonacci number, (n+1)the Fibonacci number and n. Given this number it calculates a new vector with (n+1) Fibonacci number, (n+2) Fibonacci number and (n+1). Using this function we define an infinite sequence &lt;em&gt;fib-seq&lt;/em&gt; to calculate this vector using the initialization vector [1N 1N 1N]. Since, we are likely to be dealing with large numbers, hence with prefix N after 1.&lt;/p&gt;
&lt;p&gt;We define a function &lt;em&gt;lengthlessthan?&lt;/em&gt; which returns true if the number of digits in a number are less than 1000 given a vector of the form generated by &lt;em&gt;fib-seq&lt;/em&gt;. All that is being done is to convert the number into a string and then computing its length using &lt;em&gt;java.String.length()&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With these definitions out of the way, we just generate this infinite sequence &lt;em&gt;fib-seq&lt;/em&gt; and drop all vectors such that the number of digits in Fibonacci number is less than 1000. We take the sequence to include just the first such number with length not less than 1000, separate it out using first and then find the 3rd number in this vector.&lt;/p&gt;</summary><category term="clojure"></category></entry><entry><title>Deleting Windows 7 directory containing files with too long path names</title><link href="http://localhost:8000/deleting-windows-files-with-too-long-path-len.html" rel="alternate"></link><updated>2013-09-02T20:22:00+05:30</updated><author><name>Sandeep Nangia</name></author><id>tag:localhost:8000,2013-09-02:deleting-windows-files-with-too-long-path-len.html</id><summary type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;The laptop that my employer has provided me has a program installed for upkeep of the laptop. So it keeps auto-updating appropriate patches, newly requested software etc. to my laptop. However, I have noticed a problem with this program. This software downloads
stuff from company servers and then creates directories in c:\ with lot of contents on the hard disk and then forgets to delete them. Over a period of time, this consumes
lot of disk space (I have counted hundreds of MBs once). I moved all such directories files to one directory c:\junk and then tried to delete this directory.
But, I could not delete this directory as I got this error: "Destination Path Too Long". Looked into the directories and found that they had &lt;strong&gt;really long&lt;/strong&gt; files names. I googled around 
and it seems that the &lt;a href="http://support.microsoft.com/kb/320081"&gt;official solution from Microsoft&lt;/a&gt; is to rename the files to smaller names. It's strange that Microsoft allows
one to create such long named files but not easily delete them. Anyway, since they were consuming so much disk space, I decided to write this python (2.7) utility to rename files inside this directory to shorter names. Then I manually delete the directory c:\junk. &lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;

&lt;span class="n"&gt;directoryToBeDeleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;junk&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;fqueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="n"&gt;directoryToBeDeleted&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;fqueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;afile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fqueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;afile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;afile&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;afile&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Renaming &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;fqueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Now manually delete the contents of the junk directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;All this program does is a basic &lt;a href="http://en.wikipedia.org/wiki/Breadth-first_search"&gt;Breadth First Search&lt;/a&gt;. &lt;em&gt;fqueue&lt;/em&gt; in this program is a double ended queue. Initially, at the start of the loop, the queue has just the original directory that we want to delete. In every &lt;em&gt;while&lt;/em&gt; iteration, the program takes off one file or directory name from the left of the queue and then
renames all the files and directories within this directory starting 0. To keep the numbers short, I used a hexadecimal numbering scheme. If sub-directories are found in this directory, they are added to the right of the double ended queue for the next &lt;em&gt;while&lt;/em&gt; iteration.&lt;/p&gt;
&lt;p&gt;While I found this program adequate for my needs, one could potentially rename the files using a &lt;a href="http://stackoverflow.com/questions/1181919/python-base-36-encoding"&gt;base 36 numbering scheme&lt;/a&gt; to make for even shorter filenames. That might be helpful in case there are large number of files
in the directories.&lt;/p&gt;
&lt;p&gt;I left the last step of deleting the directory as manual - because, I did not want to make a mistake. This is a dangerous script. And that's the reason, I chose not to send in the directory to be deleted via command line arguments. It then becomes too easy to make a mistake. Beware!&lt;/p&gt;
&lt;p&gt;I later heard of a program called robocopy which apparently can do this deletion easily. But, I don't have an easy way to install a new program on my employer provided laptop (has to be blessed by our IT department). So I guess, for me this is the way to go!&lt;/p&gt;</summary><category term="python"></category></entry></feed>